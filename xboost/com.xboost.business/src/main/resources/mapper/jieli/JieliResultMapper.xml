<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xboost.mapper.jieli.JieliResultMapper">

    <insert id="save" >
        INSERT into t_jieli_result(scenariosId,timebucket,connection,inbound_id,outbound_id,distance,cross_river,minutes,
        time_id,j_connection_id,kmh_didi,kmh_truck,kmh_bike,min_didi,cost_bike,cost_didi,cost_truck,cost_data,
        volume,route_cnt,truck,bike,didi,dada,str1,str2,str3,createtime,updatetime)
        VALUES (#{scenariosId},#{timeBucket},#{connection},#{inboundId},#{outboundId},#{distance},#{crossRiver},#{minutes},
        #{timeId},#{jConnectionId},#{kmhDidi},#{kmhTruck},#{kmhBike},#{minDidi},#{costBike},#{costDidi},#{costTruck},#{costDada},
        #{volume},#{routeCnt},#{truckNum},#{bikeNum},#{didiNum},#{dadaNum},#{str1},#{str2},#{str3},#{createTime},#{updateTime})
    </insert>

    <update id="update">
        update t_jieli_result set scenariosId = #{scenariosId},timebucket=#{timeBucket},connection = #{connection},
        inbound_id=#{inboundId},outbound_id = #{outboundId},distance = #{distance},cross_river = #{crossRiver},
        minutes = #{minutes},time_id = #{timeId},j_connection_id = #{jConnectionId},kmh_didi = #{kmhDidi},
        kmh_truck = #{kmhTruck},kmh_bike = #{kmhBike},min_didi = #{minDidi},cost_bike = #{costBike},cost_didi = #{costDidi},
        cost_truck = #{costTruck},cost_data = #{costDada},volume = #{volume},route_cnt = #{routeCnt},truck = #{truckNum},
        bike = #{bikeNum},didi = #{didiNum},dada = #{dadaNum} where id = #{id}
    </update>

    <select id="findByParam" parameterType="map" resultType="map" resultMap="resultMap">
        SELECT * from t_jieli_result
        <where>
            1 = 1
            <if test="keyword != null and keyword != ''">
                and scenariosId=#{scenariosId} and id=#{id}
            </if>
        </where>
        order by ${orderColumn} ${orderType}
        limit ${start},${length}
    </select>

    <select id="findAllCount" resultType="long">
        SELECT COUNT(*) FROM t_jieli_result where scenariosId=#{scenariosId}
    </select>


    <select id="findCountByParam" resultType="long" parameterType="map">
        SELECT count(*) FROM t_jieli_result
        <where>
            1 = 1
            <if test="keyword != null and keyword != ''">
                and scenariosId=#{scenariosId} and id=#{id}
            </if>
        </where>
    </select>

    <delete id="delById">
        DELETE FROM t_jieli_result WHERE scenariosId = #{id}
    </delete>

    <resultMap id="resultMap" type="JieliResult">
        <result property="id" column="id"/>
        <result property="scenariosId" column="scenariosId"/>
        <result property="timebucket" column="timeBucket"/>
        <result property="connection" column="connection"/>
        <result property="inbound_id" column="inboundId"/>
        <result property="outbound_id" column="outboundId"/>
        <result property="distance" column="distance"/>
        <result property="cross_river" column="crossRiver"/>
        <result property="minutes" column="minutes"/>
        <result property="time_id" column="timeId"/>
        <result property="j_connection_id" column="jConnectionId"/>
        <result property="kmh_didi" column="kmhDidi"/>
        <result property="kmh_truck" column="kmhTruck"/>
        <result property="kmh_bike" column="kmhBike"/>
        <result property="min_didi" column="minDidi"/>
        <result property="cost_bike" column="costBike"/>
        <result property="cost_didi" column="costDidi"/>
        <result property="cost_truck" column="costTruck"/>
        <result property="cost_dada" column="costDada"/>
        <result property="volume" column="volume"/>
        <result property="route_cnt" column="routeCnt"/>
        <result property="truck" column="truckNum"/>
        <result property="bike" column="bikeNum"/>
        <result property="didi" column="didiNum"/>
        <result property="dada" column="dadaNum"/>
    </resultMap>
</mapper>